{"version":3,"sources":["components/MonsterCard/index.js","components/Wrapper/index.js","components/Navbar/Navbar.js","App.js","index.js"],"names":["MonsterCard","props","onClick","checkCard","name","className","alt","src","image","Wrapper","children","Navbar","message","currentScore","highScore","App","state","monsters","clickedMonsters","unclickedMonsters","shuffleCards","array","i","length","j","Math","floor","random","undefined","find","item","setState","remainingMonsters","filter","this","map","friend","id","Component","ReactDOM","render","document","getElementById"],"mappings":"ogCAceA,MAXf,SAAqBC,GAEnB,OACE,qBAAKC,QAAS,kBAAMD,EAAME,UAAUF,EAAMG,OAAOC,UAAU,OAA3D,SACE,qBAAMA,UAAU,gBAAhB,SACE,qBAAKC,IAAI,sDAAsDC,IAAKN,EAAMO,a,MCDnEC,MAJf,SAAiBR,GACf,OAAO,qBAAKI,UAAU,UAAf,SAA0BJ,EAAMS,Y,OCS1BC,G,MAVA,SAACV,GAAD,OACb,sBAAKI,UAAU,SAAf,UACE,8BAAMJ,EAAMW,UACZ,0CACS,uBAAMP,UAAU,QAAhB,UAAyBJ,EAAMY,aAA/B,OADT,gBAEE,sBAAMR,UAAU,YAAhB,SAA6BJ,EAAMa,oBCsE1BC,E,4MArEbC,MAAQ,CACNJ,QAAS,mEACTE,UAAW,EACXD,aAAc,EACdI,SAAUA,EACVC,gBAAiBD,EACjBE,kBAAmBF,G,EAGrBG,aAAe,SAACC,GACd,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,O,EAM7CrB,UAAY,SAACC,GAKX,QAAqBwB,IAJA,EAAKZ,MAAMG,kBAAkBU,MAChD,SAACC,GAAD,OAAUA,EAAK1B,OAASA,KAIxB,EAAK2B,SAAS,CACZjB,UACE,EAAKE,MAAMH,aAAe,EAAKG,MAAMF,UACjC,EAAKE,MAAMH,aACX,EAAKG,MAAMF,UACjBD,aAAc,EACdD,QAAQ,iCAAD,OAAmCR,GAC1Ce,kBAAmBF,QAEhB,CACL,IAAMe,EAAoB,EAAKhB,MAAMG,kBAAkBc,QACrD,SAACH,GAAD,OAAUA,EAAK1B,OAASA,KAG1B,EAAK2B,SAAS,CACZlB,aAAc,EAAKG,MAAMH,aAAe,EACxCD,QAAQ,+BAAD,OAAiCR,EAAjC,SACPe,kBAAmBa,IAErB,EAAKZ,aAAaH,K,4CAKtB,WAAU,IAAD,OACP,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEL,QAASsB,KAAKlB,MAAMJ,QACpBC,aAAcqB,KAAKlB,MAAMH,aACzBC,UAAWoB,KAAKlB,MAAMF,YAGvBoB,KAAKlB,MAAMC,SAASkB,KAAI,SAACC,GAAD,OACvB,cAAC,EAAD,CACEhC,KAAMgC,EAAOhC,KACbiC,GAAID,EAAOC,GAEX7B,MAAO4B,EAAO5B,MACdL,UAAW,EAAKA,WAFXiC,EAAOC,c,GA7DNC,a,MCFlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0ea021dc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction MonsterCard(props) {\n\n  return (\n    <div onClick={() => props.checkCard(props.name)} className=\"card\">\n      <div  className=\"img-container\">\n        <img alt=\"a monster from the video game series Monster Hunter\" src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default MonsterCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = (props) => (\r\n  <nav className=\"navbar\">\r\n    <div>{props.message}</div>\r\n    <div >\r\n      Score: <span className=\"score\">{props.currentScore} </span>| High Score:\r\n      <span className=\"highScore\">{props.highScore}</span>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport MonsterCard from \"./components/MonsterCard\";\nimport Wrapper from \"./components/Wrapper\";\n\nimport monsters from \"./monster.json\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nclass App extends Component {\n  // Setting this.state.monsters to the monsters json array\n  state = {\n    message: \"Click on a monster to begin! Don't click the same monster twice!\",\n    highScore: 0,\n    currentScore: 0,\n    monsters: monsters,\n    clickedMonsters: monsters,\n    unclickedMonsters: monsters,\n  };\n\n  shuffleCards = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  checkCard = (name) => {\n    const checkMonster = this.state.unclickedMonsters.find(\n      (item) => item.name === name\n    );\n\n    if (checkMonster === undefined) {\n      this.setState({\n        highScore:\n          this.state.currentScore > this.state.highScore\n            ? this.state.currentScore\n            : this.state.highScore,\n        currentScore: 0,\n        message: `Oh no, you already clicked on ${name}`,\n        unclickedMonsters: monsters,\n      });\n    } else {\n      const remainingMonsters = this.state.unclickedMonsters.filter(\n        (item) => item.name !== name\n      );\n\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        message: `Nice, you hadn't clicked on ${name} yet!`,\n        unclickedMonsters: remainingMonsters,\n      });\n      this.shuffleCards(monsters);\n    }\n  };\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          message={this.state.message}\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n\n        {this.state.monsters.map((friend) => (\n          <MonsterCard\n            name={friend.name}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n            checkCard={this.checkCard}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}